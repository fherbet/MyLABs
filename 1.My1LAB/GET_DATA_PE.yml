---
- name: get data pe
  hosts: all
  connection: local
  gather_facts: no
  serial: 1

  vars:
    cli:
      host: 10.255.1.3
      username: osainstall
      password: 0sainstall
      transport: cli

    cliPE:
      host: "lo0-{{SAR_NAME}}"
      username: osainstall
      password: 0sainstall
      transport: cli

    TEMP1: []
    MGMT_LB_PE: []
    REVERSE_DNS: []
    SAR_temp: []
    SAR_CITY: []
    SAR_NUM: []
    SAR_NAME: []
    TEMP2: []
    TEMP3: []
    PE_SUBINT: []
    PE_INT: []
    PE_VLANID: []
    SAR_OS: []

  tasks:

### DETECT CPE LB Originator with SHOW IP BGP on MGMT

## if PUBLIC_MGMT == True

    - name: MGMT / show ip bgp vpnv4 vrf oss-new-mplsmgmt {{ COLT_LB.0.IP | ipaddr('address')}}/32 | i Originator
      ios_command:
        commands: show ip bgp vpnv4 vrf oss-new-mplsmgmt {{ COLT_LB.0.IP | ipaddr('address')}}/32 | i Originator
        provider: "{{ cli }}"
      register: config
      when: PUBLIC_MGMT == true

    - name: Display 'show ip bgp vpnv4 vrf oss-new-mplsmgmt on MGMT'
      debug: var=config
      when: PUBLIC_MGMT == true


    - name: extract values from sh ip bgp | i Originator
      set_fact:
        TEMP1: "{{[item.split(',')[0]]}}"
      with_items: "{{config.stdout_lines}}"
      when: PUBLIC_MGMT == true
      ignore_errors: True

## if PUBLIC_MGMT == False

    - name: MGMT / show ip bgp {{ COLT_LB.0.IP | ipaddr('address')}}/32  | i  from
      ios_command:
        commands: show ip bgp {{ COLT_LB.0.IP | ipaddr('address')}}/32  | i  from
        provider: "{{ cli }}"
      register: config
      when: PUBLIC_MGMT == false

    - name: Display 'show ip bgp  on MGMT'
      debug: var=config
      when: PUBLIC_MGMT == false

#
#    - name: extract values from sh ip bgp  | i  from
#      set_fact:
#        MGMT_LB_PE: "{{[item.split(' ')[8]]}}"
#      with_items: "{{config.stdout_lines}}"
#      when: PUBLIC_MGMT == false
#      ignore_errors: True
#
#    - debug: msg="{{MGMT_LB_PE}}"

####TEST
    - name: extract values from sh ip bgp  | i  from
      set_fact:
        #MGMT_LB_PE2: "{{item | map('regex_findall','from')  | map('join') | list }}"
        MGMT_LB_PE: "{{config.stdout_lines[0] | map('regex_findall','\\(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\)$') | map('join') | list}}"
      when: PUBLIC_MGMT == false
      ignore_errors: True

    - debug: msg="{{MGMT_LB_PE}}"

    - name: strip (
      set_fact:
        #MGMT_LB_PE2: "{{item | map('regex_findall','from')  | map('join') | list }}"
        MGMT_LB_PE: "{{MGMT_LB_PE | map('regex_replace','\\(','') | list}}"
      when: PUBLIC_MGMT == false
      ignore_errors: True

    - debug: msg="{{MGMT_LB_PE}}"

    - name: strip )
      set_fact:
        #MGMT_LB_PE2: "{{item | map('regex_findall','from')  | map('join') | list }}"
        MGMT_LB_PE: "{{MGMT_LB_PE | map('regex_replace','\\)','') | list}}"
      when: PUBLIC_MGMT == false
      ignore_errors: True

    - debug: msg="{{MGMT_LB_PE}}"

####

    - name: search MGMT_LB_PE reverse DNS
      set_fact:
        REVERSE_DNS : "{{ lookup('dig', MGMT_LB_PE[0] + '/PTR') }}"
      with_items: "{{MGMT_LB_PE}}"

    - debug: msg="Reverse DNS for {{MGMT_LB_PE[0]}} is {{ REVERSE_DNS }}"

    - name: remove lo0- from from reverse
      set_fact:
        SAR_NAME: "{{ item|replace('lo0-', '')}}"
      with_items: "{{ REVERSE_DNS }}"

    - name: remove . from from SAR_NAME
      set_fact:
        SAR_NAME: "{{ item|replace('.', '')}}"
      with_items: "{{ SAR_NAME }}"

    - debug: msg="after |replace Reverse DNS for {{MGMT_LB_PE}} is {{ SAR_NAME }}"

    - debug: msg="{{COLT_LB.0.IP|ipaddr('address')}} is advertised by {{SAR_NAME}}"


    - name: set fact SAR_OS for SAR OS
      set_fact:
        SAR_OS: "{{ hostvars[SAR_NAME].dev_os }}"

    - debug:
        msg: "{{SAR_NAME}} OS is : {{ hostvars[SAR_NAME].dev_os }}"

    - lineinfile:
        name: host_vars/{{inventory_hostname}}.yml
        regexp: 'SAR:.*'
        line: 'SAR: {{SAR_NAME}}'

##IOSXR
    - name: sh run formal interface | remotewanip
      iosxr_command:
        commands:  sh run formal interface | i "{{ SUBVPN.0.WAN.0.IP | ipaddr('1') | ipaddr('address')}} "
        provider: "{{ cliPE }}"
      when: SAR_OS == "iosxr"
      register: shiosxr


    - name: print shiosxr
      debug: var=shiosxr
      when: SAR_OS == "iosxr"


    - name: extract interfaces from shiosxr
      set_fact:
        PE_SUBINT: "{{[item.split(' ')[1]]}}"
      when: SAR_OS == "iosxr"
      with_items: "{{shiosxr.stdout}}"
      ignore_errors: True

    - debug: msg="{{PE_SUBINT}}"
      when: SAR_OS == "iosxr"


##JUNOS

##IOS
#    - name: sh ip int brie | i remotewanip / telnet / napalm_cli
    - napalm_cli:
        hostname: "lo0-{{SAR_NAME}}"
        username: "osainstall"
        password: "0sainstall"
        dev_os: "{{dev_os}}"
        optional_args: "transport=telnet"
        args:
            commands:
                - "show ip int brie | i {{ SUBVPN.0.WAN.0.IP | ipaddr('1') | ipaddr('address')}}"
      when: SAR_OS == "ios"
      register: shios

    - name: print shios
      debug: var=shios.results
      when: SAR_OS == "ios"


    - name: set fact temp = shios.results
      set_fact:
        TEMP1: "{{ item }}"
      with_dict: "{{shios.results}}"
      when: SAR_OS == "ios"
      ignore_errors: True

    - name: extract interfaces from shios
      set_fact:
        PE_SUBINT: "{{ item.split(' ')[0] }}"
      with_items: "{{TEMP1.value}}"
      when: SAR_OS == "ios"
      ignore_errors: True

    - debug: msg="{{PE_SUBINT}}"
      when: SAR_OS == "ios"



########EXTRACT FROM SUBINT and FILL INFO in HOSTVARS/hostXXX.yml

    - name: extract PE_INT and PE_VLANID
      set_fact:
        PE_INT: "{{ [item.split('.')[0]] }}"
        PE_VLANID: "{{ [item.split('.')[1]] }}"
      with_items: "{{PE_SUBINT}}"
      when: SAR_OS == "junos" or SAR_OS == "iosxr" or SAR_OS == "ios"

    - debug:
        msg: "PE_INT is {{PE_INT[0]}} and PE_VLANID is {{PE_VLANID[0]}}"
      when: SAR_OS == "junos" or SAR_OS == "iosxr" or SAR_OS == "ios"


    - name: set fact for SAR_INT
      set_fact:
        SAR_INT: "{{PE_INT[0]}}"
      when: SAR_OS == "junos" or SAR_OS == "iosxr" or SAR_OS == "ios"

    - lineinfile:
        name: host_vars/{{inventory_hostname}}.yml
        regexp: 'SAR_INT:.*'
        line: 'SAR_INT: {{PE_INT[0]}}'
      when: SAR_OS == "junos" or SAR_OS == "iosxr" or SAR_OS == "ios"



    - name: set fact for SAR_VLAN_FACING_CPE_GRT
      set_fact:
        SAR_VLAN_FACING_CPE_GRT: "{{PE_VLANID[0]}}"
      when: SAR_OS == "junos" or SAR_OS == "iosxr" or SAR_OS == "ios"



    - lineinfile:
        name: host_vars/{{inventory_hostname}}.yml
        insertafter: 'SAR_INT:.*'
        regexp: 'SAR_VLAN_FACING_CPE_GRT:.*'
        line: 'SAR_VLAN_FACING_CPE_GRT: {{SAR_VLAN_FACING_CPE_GRT}}'
      when: SAR_OS == "junos" or SAR_OS == "iosxr" or SAR_OS == "ios"
